AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Travel Divider - MVP serverless application for tracking and splitting travel expenses

# Simplified parameters for MVP
Parameters:
  Environment:
    Type: String
    Default: dev
    Description: Deployment environment (dev, staging, prod)
  
  ExpensesTableName:
    Type: String
    Default: travel-divider-expenses-dev
    Description: Name of the DynamoDB table for expenses
  
  ReceiptsBucketName:
    Type: String
    Default: travel-divider-receipts-dev
    Description: Name of the S3 bucket for receipt images

Globals:
  Function:
    Timeout: 30
    MemorySize: 128
    Runtime: nodejs18.x
    Environment:
      Variables:
        EXPENSES_TABLE: !Ref ExpensesTable
        RECEIPTS_BUCKET: !Ref ReceiptsBucket
        ENVIRONMENT: !Ref Environment
  
  Api:
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'*'"
      AllowOrigin: "'*'"
    EndpointConfiguration: REGIONAL

Resources:
  # Simple DynamoDB table for expenses
  ExpensesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref ExpensesTableName
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: expenseId
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: S
      KeySchema:
        - AttributeName: expenseId
          KeyType: HASH
        - AttributeName: createdAt
          KeyType: RANGE

  # Simple S3 bucket for storing receipt images
  ReceiptsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${ReceiptsBucketName}-${AWS::AccountId}"
      # CORS configuration with exposed headers for presigned URLs
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: ['GET', 'PUT', 'POST', 'DELETE', 'HEAD']
            AllowedOrigins: ['*']
            ExposeHeaders: 
              - 'ETag'
              - 'x-amz-server-side-encryption'
              - 'x-amz-request-id'
              - 'x-amz-id-2'
            MaxAgeSeconds: 3600

  # IAM role with basic permissions
  TravelDividerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: !GetAtt ExpensesTable.Arn
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource: 
                  - !Sub ${ReceiptsBucket.Arn}
                  - !Sub ${ReceiptsBucket.Arn}/*

  # Lambda functions with simple configuration
  
  # Create expense function
  CreateExpenseFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/functions/createExpense/
      Handler: index.handler
      Role: !GetAtt TravelDividerLambdaRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /expenses
            Method: post

  # Get expenses function
  GetExpensesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/functions/getExpenses/
      Handler: index.handler
      Role: !GetAtt TravelDividerLambdaRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /expenses
            Method: get

  # Update expense function
  UpdateExpenseFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/functions/updateExpense/
      Handler: index.handler
      Role: !GetAtt TravelDividerLambdaRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /expenses/{expenseId}
            Method: put

  # Delete expense function
  DeleteExpenseFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/functions/deleteExpense/
      Handler: index.handler
      Role: !GetAtt TravelDividerLambdaRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /expenses/{expenseId}
            Method: delete

  # Generate upload URL function
  GenerateUploadUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/functions/generateUploadUrl/
      Handler: index.handler
      Role: !GetAtt TravelDividerLambdaRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /upload-url
            Method: get

  # Get signed download URL function
  GetSignedDownloadUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/functions/getSignedDownloadUrl/
      Handler: index.handler
      Role: !GetAtt TravelDividerLambdaRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /download-url
            Method: get

Outputs:
  # Main resource outputs
  ExpensesTable:
    Description: "DynamoDB Table for storing expenses"
    Value: !Ref ExpensesTable
  
  ReceiptsBucket:
    Description: "S3 Bucket for storing receipt images"
    Value: !Ref ReceiptsBucket
    
  ReceiptsBucketUrl:
    Description: "S3 Bucket URL for receipt images"
    Value: !Sub "https://${ReceiptsBucket.DomainName}"

  # API Gateway endpoints  
  ApiEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
    
  UploadUrlEndpoint:
    Description: "Endpoint for generating upload URLs"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/upload-url"
    
  DownloadUrlEndpoint:
    Description: "Endpoint for generating download URLs"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/download-url"